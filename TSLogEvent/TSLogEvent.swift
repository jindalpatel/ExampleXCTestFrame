//
//  TSLogEvent.swift
//  TSLogEvent
//
//  Created by Layton, James on 7/19/21.
//  Copyright Â© 2021 Title Source. All rights reserved.
//

import Foundation
import QuartzCore
import os.log

public class TSLogEvent: NSObject {
    
    static let shared = TSLogEvent()
    
    var logEventInterfaces = [TSLogEventInterface]()
    
    /// InitializeLogEvent should be called before using other methods in TSLogEvent.
    /// - Parameters:
    ///   - dynatraceConfig: Configuration for the Dynatrace log event
    ///   - splunkMintConfig: Configuration for the Splunk log event
    @objc public static func initializeLogEvent(splunkMintConfig: SplunkMintConfig?) {
        if ProcessInfo.processInfo.environment["XCTestConfigurationFilePath"] == nil { // Not unit test
            
            // Splunk
            addSplunk(splunkMintConfig)
        }
    }
    
    /// This method should be called when need set username
    /// - Parameter username: A string of username/Email
    @objc public static func setUsername(_ username: String) {
        logToOtherSDK(username: username, eventName: nil, error: nil)
    }
    
    /// Event name should be an NSString that is no more than 40 characters long. Text will be truncated at 40 characters.
    /// - Parameter eventName: A string of event name
    @objc public static func logEvent(_ eventName: String) {
        logEvent(eventName: eventName, parameters: nil, shouldIncludeAnalytics: true, shouldIncludeCrashReporting: false)
        logToOtherSDK(username: nil, eventName: eventName, error: nil)
    }
    
    /// Event name should be an NSString that is no more than 40 characters long. Text will be truncated at 40 characters. action should be no more than 100 characters.
    /// - Parameters:
    ///   - eventName: A string of event name
    ///   - action: An action generated by user or system
    @objc public static func logEvent(_ eventName: String, withAction action: String) {
        let parameters = [K.EventParameter.action: action]
        logEvent(eventName: eventName, parameters: parameters, shouldIncludeAnalytics: true, shouldIncludeCrashReporting: false)
    }
    
    /// Event name should be an NSString that is no more than 40 characters long. Text will be truncated at 40 characters. errorDescription should be no more than 100 characters.
    /// - Parameters:
    ///   - eventName: A string of event name
    ///   - error: An error generated by user or system
    @objc public static func logEvent(_ eventName: String, withError error: Error) {
        let currentError = (error as NSError)
        var newUserInfo = (error as NSError).userInfo
        newUserInfo[K.EventParameter.event] = eventName
        let newError = NSError(domain: currentError.domain, code: currentError.code, userInfo: newUserInfo)
        
        logEvent(eventName: eventName, parameters: newUserInfo, shouldIncludeAnalytics: true, shouldIncludeCrashReporting: false)
        logToOtherSDK(username: nil, eventName: eventName, error: newError)
    }
    
    /// Event name should be an NSString that is no more than 40 characters long. Text will be truncated at 40 characters. Parameters should be an NSDictionary of key value pairs of NSString objects. Keys should be no more than 40 characters. Values should be no more than 100 characters.
    /// - Parameters:
    ///   - eventName: A string of event name
    ///   - parameters: A dictionary for additional infomation or errors
    @objc public static func logEvent(_ eventName: String, withParameters parameters: [String: Any]?) {
        logEvent(eventName: eventName, parameters: parameters, shouldIncludeAnalytics: true, shouldIncludeCrashReporting: false)
    }
    
    /// This will log to crash reporting ONLY, it will not log to analytics. Event names can be longer than the 40 character limit.
    /// - Parameter eventName: A string of event name
    @objc public static func logEventForCrashReporting(_ eventName: String) {
        logEvent(eventName: eventName, parameters: nil, shouldIncludeAnalytics: false, shouldIncludeCrashReporting: true)
    }
    
    /// logHistory returns a large string containing all logs since the app was last opened. Each log is separated by a newline character.
    /// - Returns: Return all logs
    @objc public static func logHistory() -> String {
        TSLogHistory.shared.logHistory()
    }
    
    /// Clears all the histories of the logs.
    @objc public static func clearHistory() {
        TSLogHistory.shared.clearLogs()
    }
}

// Internal
extension TSLogEvent {
    
    static func addSplunk(_ splunkMintConfig: SplunkMintConfig?) {
        if splunkMintConfig != nil {
            let splunkMintLogEvent = SplunkMintLogEvent()
            splunkMintLogEvent.configuration = splunkMintConfig
            splunkMintLogEvent.initializeSDK()
            TSLogEvent.shared.logEventInterfaces.append(splunkMintLogEvent)
        }
    }
    
    static func logToOtherSDK(username: String?, eventName: String?, error: Error?) {
        let allLogEvent = TSLogEvent.shared.logEventInterfaces
        
        if allLogEvent.count > 0 {
            for logEvent in allLogEvent {
                if let username = username {
                    logEvent.setUsername(username)
                } else if let eventName = eventName {
                    logEvent.logEvent(eventName)
                } else if let eventName = eventName, let error = error {
                    logEvent.logEvent(eventName, error: error)
                } else {
                    // Do nothing
                }
            }
        }
    }
    
    static func logEvent(eventName: String,
                         parameters: [String: Any]?,
                         shouldIncludeAnalytics: Bool,
                         shouldIncludeCrashReporting: Bool) {
        
        var eventWithParameters = eventName // Default to event name only
        var shortenedEventName = eventName.count > 40 ? (eventName as NSString).substring(to: 40) : eventName
        shortenedEventName = shortenedEventName.replacingOccurrences(of: " ", with: "_")
        
        if let parameters = parameters {
            eventWithParameters = String(format: "%@, Parameters: %@", eventName, parameters)
        }

        print("Analytics Event: \(eventWithParameters)")
        TSLogHistory.shared.addLog(message: eventWithParameters)
    }
    
    static public func print(_ items: String,
                             function: String = #function,
                             filename: String = #file,
                             line: Int = #line) {
        
        let pretty = "\(CACurrentMediaTime()) \(URL(fileURLWithPath: filename).lastPathComponent) [line: \(line)] \(function)\n\t-> "
    
#if DEBUG
        if #available(iOS 14.0, *) {
            Logger.logEvent.debug("\(pretty)\(items)\n")
        } else {
            Swift.print("\(pretty)\(items)\n")
        }
#else
        if #available(iOS 14.0, *) {
            Logger.logEvent.log("\(items)")
        } else {
            Swift.print(items)
        }
#endif
    }
}
